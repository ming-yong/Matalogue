{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Form","props","step","Result","GrabFrom","userName","articleAmount","dateStart","dateEnd","submitInfo","handleChange","onSubmit","className","type","name","onChange","value","handleSubmit","App","state","bind","resetAll","event","target","this","setState","alert","preventDefault","href","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPA0DA,SAASA,EAAKC,GACb,OAAQA,EAAMC,MACb,KAAK,EACJ,OAAO,kBAACC,EAAD,MACR,QACC,OAAO,kBAACC,EAAD,CAAUC,SAAUJ,EAAMI,SAAUC,cAAeL,EAAMK,cAAeC,UAAWN,EAAMM,UAAWC,QAASP,EAAMO,QAASC,WAAYR,EAAMQ,WAAYC,aAAcT,EAAMS,gBAIxL,SAASN,EAASH,GACjB,OACC,0BAAMU,SAAUV,EAAMQ,YACrB,yBAAKG,UAAU,OACd,oDAEC,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,SAAUd,EAAMS,aAAcM,MAAOf,EAAMI,aAIhF,yBAAKO,UAAU,OACd,0DAEC,2BAAOC,KAAK,SAASC,KAAK,gBAAgBC,SAAUd,EAAMS,aAAcM,MAAOf,EAAMK,kBAIvF,yBAAKM,UAAU,OACd,wCAEC,2BAAOC,KAAK,OAAOC,KAAK,YAAYC,SAAUd,EAAMS,aAAcM,MAAOf,EAAMM,aAEhF,wCAEC,2BAAOM,KAAK,OAAOC,KAAK,UAAUC,SAAUd,EAAMS,aAAcM,MAAOf,EAAMO,YAI/E,yBAAKI,UAAU,OACd,2BAAOC,KAAK,SAASG,MAAM,eAAKJ,UAAU,UAM9C,SAAST,EAAOF,GACf,OAAO,0BAAMU,SAAUV,EAAMgB,eAGfC,M,kDAtGd,WAAYjB,GAAQ,IAAD,8BAClB,cAAMA,IACDkB,MAAQ,CACZjB,KAAM,EACNG,SAAU,GACVC,cAAe,IACfC,UAAW,GACXC,QAAS,IAGV,EAAKC,WAAa,EAAKA,WAAWW,KAAhB,gBAClB,EAAKV,aAAe,EAAKA,aAAaU,KAAlB,gBACpB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAZE,E,yDAeNE,GACZ,IAAMC,EAASD,EAAMC,OACrBC,KAAKC,SAAL,eACEF,EAAOT,KAAOS,EAAOP,U,iCAIbM,GACVI,MAAMF,KAAKL,MAAMX,SACW,KAAxBgB,KAAKL,MAAMd,UACdmB,KAAKC,SAAS,CAAEvB,KAAM,IAEvBoB,EAAMK,mB,+BAGEL,GACRE,KAAKC,SAAS,CAAEvB,KAAM,M,+BAItB,OACC,yBAAKU,UAAU,OACd,gCACC,0CAED,kBAACZ,EAAD,CAAME,KAAMsB,KAAKL,MAAMjB,KAAMG,SAAUmB,KAAKL,MAAMd,SAAUE,UAAWiB,KAAKL,MAAMZ,UAAWC,QAASgB,KAAKL,MAAMX,QAASF,cAAekB,KAAKL,MAAMb,cAAeG,WAAYe,KAAKf,WAAYC,aAAcc,KAAKd,eACnN,4BAAQE,UAAU,UACjB,gCACC,uBAAGgB,KAAK,IAAIhB,UAAU,UAAtB,yCAID,4BAAQiB,QAASL,KAAKH,UAAtB,kC,GAhDaS,IAAMC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3cfaa715.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tstep: 1,\n\t\t\tuserName: \"\",\n\t\t\tarticleAmount: 100,\n\t\t\tdateStart: \"\",\n\t\t\tdateEnd: \"\",\n\t\t};\n\n\t\tthis.submitInfo = this.submitInfo.bind(this);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.resetAll = this.resetAll.bind(this);\n\t}\n\n\thandleChange(event) {\n\t\tconst target = event.target;\n\t\tthis.setState({\n\t\t\t[target.name]: target.value,\n\t\t});\n\t}\n\n\tsubmitInfo(event) {\n\t\talert(this.state.dateEnd);\n\t\tif (this.state.userName !== \"\") {\n\t\t\tthis.setState({ step: 2 });\n\t\t}\n\t\tevent.preventDefault();\n\t}\n\n\tresetAll(event) {\n\t\tthis.setState({ step: 1 });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<header>\n\t\t\t\t\t<h1>Matalogue</h1>\n\t\t\t\t</header>\n\t\t\t\t<Form step={this.state.step} userName={this.state.userName} dateStart={this.state.dateStart} dateEnd={this.state.dateEnd} articleAmount={this.state.articleAmount} submitInfo={this.submitInfo} handleChange={this.handleChange} />\n\t\t\t\t<footer className=\"footer\">\n\t\t\t\t\t<button>\n\t\t\t\t\t\t<a href=\"#\" className=\"credit\">\n\t\t\t\t\t\t\tü•ïË±ÜËÖêÂà∂‰Ωú\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={this.resetAll}>üßÑÈáçÊù•</button>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction Form(props) {\n\tswitch (props.step) {\n\t\tcase 2:\n\t\t\treturn <Result/>;\n\t\tdefault:\n\t\t\treturn <GrabFrom userName={props.userName} articleAmount={props.articleAmount} dateStart={props.dateStart} dateEnd={props.dateEnd} submitInfo={props.submitInfo} handleChange={props.handleChange} />;\n\t}\n}\n\nfunction GrabFrom(props) {\n\treturn (\n\t\t<form onSubmit={props.submitInfo}>\n\t\t\t<div className=\"row\">\n\t\t\t\t<label>\n\t\t\t\t\tÁî®Êà∑Âêç\n\t\t\t\t\t<input type=\"text\" name=\"userName\" onChange={props.handleChange} value={props.userName} />\n\t\t\t\t</label>\n\t\t\t</div>\n\n\t\t\t<div className=\"row\">\n\t\t\t\t<label>\n\t\t\t\t\tÊñáÁ´†Êï∞Èáè\n\t\t\t\t\t<input type=\"number\" name=\"articleAmount\" onChange={props.handleChange} value={props.articleAmount} />\n\t\t\t\t</label>\n\t\t\t</div>\n\n\t\t\t<div className=\"row\">\n\t\t\t\t<label>\n\t\t\t\t\t‰ªé\n\t\t\t\t\t<input type=\"date\" name=\"dateStart\" onChange={props.handleChange} value={props.dateStart} />\n\t\t\t\t</label>\n\t\t\t\t<label>\n\t\t\t\t\tÂà∞\n\t\t\t\t\t<input type=\"date\" name=\"dateEnd\" onChange={props.handleChange} value={props.dateEnd} />\n\t\t\t\t</label>\n\t\t\t</div>\n\n\t\t\t<div className=\"row\">\n\t\t\t\t<input type=\"submit\" value=\"ÊäìÔºÅ\" className=\"btn\" />\n\t\t\t</div>\n\t\t</form>\n\t);\n}\n\nfunction Result(props) {\n\treturn <form onSubmit={props.handleSubmit}></form>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}